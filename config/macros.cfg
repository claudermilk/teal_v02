[save_variables]
filename: /home/pi/printer_data/config/.variables.stb


#####################################################################
#   Homing
#####################################################################
[gcode_macro CHOME]
description: Homes XYZ axis only if printer is in a non-homed state
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SAVE_GCODE_STATE NAME=STATE_HOME_X

    # Home
    G28 X
    # Move away
    G91
    G1 X-5 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P500
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    RESTORE_GCODE_STATE NAME=STATE_HOME_X

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SAVE_GCODE_STATE NAME=STATE_HOME_Y

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-5 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P500
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    RESTORE_GCODE_STATE NAME=STATE_HOME_Y

[homing_override]
axes: xyz
set_position_z: 0
gcode:
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    SAVE_GCODE_STATE NAME=STATE_HOME_OVERRIDE

    # Home Z first, to avoid any situation where the nozzle might scrape the bed
    {% if home_all or 'Z' in params %}
        G28 Z
    {% endif %}

    {% if home_all or 'X' in params %}
        _HOME_X
    {% endif %}

    {% if home_all or 'Y' in params %}
        _HOME_Y
    {% endif %}
    
    G90
    G0 X60 Y60 Z20 F3600 # move to bed center
    RESTORE_GCODE_STATE NAME=STATE_HOME_OVERRIDE


#####################################################################
#   Main Macros
#####################################################################
[gcode_macro PRINT_START]
gcode:
# Parameters
  {% set bedtemp = params.BED|default(60)|int %}
  {% set hotendtemp = params.HOTEND|default(215)|int %}
  {% set chambertemp = params.CHAMBER|default(0)|int %}
  {% set _filament = params.FILAMENT|string %}
#  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
#  {% set filament = printer.save_variables.variables.filament %}

  CHOME                                             ; home if needed
  G90                                               ; absolute positioning    

  ## Do heatsoak
  M106 S205
  {% if printer["temperature_sensor chamber_temp"].temperature < chambertemp %}
    _HEATSOAK NOZZLETEMP={hotendtemp} BEDTEMP={bedtemp} MOVE=1                        # Set up to heat soak if chamber temp is set higher than current reading
    M190 S{bedtemp}                                        # Set target bed temp & wait for it
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={chambertemp}   # Do the actual heat soak wait, until chamber temp is at target
  {% else %}
    {% if printer.heater_bed.temperature < (bedtemp-2) %}
      _HEATSOAK NOZZLETEMP={hotendtemp} BEDTEMP={bedtemp} MOVE=1	        		  # Bed is below target temp, get it heating & safely park toolhead
      M190 S{bedtemp}                                     # Set bed target temp & wait for it
    {% else %}
      _HEATSOAK TEMP={bedtemp} MOVE=0                     # Just do a bed heat, no champer temp (open case for PLA)
    {% endif %}
  {% endif %}
  M106 S0                                                 # Turn off part cooling fan from heatsoak

  G1 Z20 F3000                   ; move nozzle away from bed
  
  #RESPOND MSG="Heating nozzle"
  #M106 S205
  #M109 S{hotendtemp}                                       # Do final nozzle heat
#  G1 E{user.filament.retract.end} F3600                    # Extrude to account for clean_nozzle retraction

  M83                                                      # Extruder to relative  
  #do KAMP Voron Purge where
  G92 E0                                                   # Reset extruder	
  #LED printing
  RESPOND MSG="Printing"
   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
  {% set _filament = params.FILAMENT|default("")|string %}
  {% set chamber = params.CHAMBER|default(0)|int %}

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}


    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y-5} F3600          ; park nozzle at rear (move 5mm off rar to allow homing)
    LOGO_READY

[gcode_macro _HEATSOAK]
description: Helper: Set up to heat soak printer. Usage: _HEATSOAK [TEMP=temp(110)] [MOVE=move(1)]
gcode:
  {% set nozzletemp = params.TEMP|default(150)|int %}
  {% set bedtemp = params.TEMP|default(110)|int %}
  {% set move = params.MOVE|default(1)|int %}
	
#	LED_HEATING
  RESPOND MSG="Warming up"
	M140 S{bedtemp}                                            # Heat the bed
  M104 S{nozzletemp}                                               # Set hotend to no-ooze temp & for Tap warm probing
	{% if bedtemp >= 100 %}                                    # It's ABS or other high-temp plastic, closed case
		M106 S205                                             # Turn on part fan to 80% for 
	{% else %}
    M106 S0                                               # Turn off part fan. Open case, no need
	{% endif %}

	{% if move == 1 %}
		CHOME                                                 # Conditional home
    CENTER
#		PARK P=bed                                            # Park toolhead in safe location (center volume)
#		LED_HEATING
    LOGO_PENDING
	{% endif %}
#####################################################################
#   Parking Macros
#####################################################################
[gcode_macro CENTER]
description: Moves the toolhead to the center
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y{x_center} F7800


[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y10 F7800
